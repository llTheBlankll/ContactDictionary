/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.asharia.contactdictionary;

import com.formdev.flatlaf.FlatLightLaf;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 *
 * @author Nytri
 */
public class Dashboard extends javax.swing.JFrame {

    private final Connect connection = new Connect();
    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * Creates new form Home
     */
    public Dashboard() {
        FlatLightLaf.setup();
        initComponents();

        this.setLocationRelativeTo(null);

        // Get the Table data from the database and import it to Contact Table.
        refreshContactTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        container = new javax.swing.JPanel();
        txt_email = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txt_alias = new javax.swing.JTextField();
        btn_save = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btn_delete = new javax.swing.JButton();
        btn_update = new javax.swing.JButton();
        btn_refresh = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        contactTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txt_phoneNumber = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txt_name = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        menuBar_dashboard = new javax.swing.JMenuBar();
        menu_contacts = new javax.swing.JMenu();
        menuItem_search = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        container.setBackground(new java.awt.Color(255, 255, 255));

        txt_email.setToolTipText("Email address (Optional)");
        txt_email.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_emailKeyPressed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Roboto", Font.PLAIN, 12)); // NOI18N
        jLabel5.setText("Alias:");

        txt_alias.setToolTipText("Alias of a person (Optional)");
        txt_alias.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_aliasKeyPressed(evt);
            }
        });

        btn_save.setText("Save");
        btn_save.addActionListener(this::btn_saveActionPerformed);

        jLabel1.setFont(new java.awt.Font("Roboto", Font.PLAIN, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Table Control");
        jLabel1.setToolTipText("");

        btn_delete.setText("Delete");
        btn_delete.addActionListener(this::btn_deleteActionPerformed);

        btn_update.setText("Update");
        btn_update.addActionListener(this::btn_updateActionPerformed);

        btn_refresh.setText("Refresh");
        btn_refresh.addActionListener(this::btn_refreshActionPerformed);

        contactTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Phone number", "Name", "Email", "Alias"
            }
        ) {
            final Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            final boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(contactTable);

        jLabel2.setFont(new java.awt.Font("Roboto", Font.PLAIN, 12)); // NOI18N
        jLabel2.setText("Phone Number:");

        txt_phoneNumber.setToolTipText("Phone number (e.g: 9998216556)");
        txt_phoneNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_phoneNumberKeyPressed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Roboto", Font.PLAIN, 12)); // NOI18N
        jLabel3.setText("Name:");

        txt_name.setToolTipText("Name of the person.");
        txt_name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_nameKeyPressed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Roboto", Font.PLAIN, 12)); // NOI18N
        jLabel4.setText("Email:");

        javax.swing.GroupLayout containerLayout = new javax.swing.GroupLayout(container);
        container.setLayout(containerLayout);
        containerLayout.setHorizontalGroup(
            containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, containerLayout.createSequentialGroup()
                            .addComponent(btn_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btn_update, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(txt_phoneNumber, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txt_name, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txt_email, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txt_alias, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(containerLayout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(btn_save))
                    .addGroup(containerLayout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(btn_refresh)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 566, Short.MAX_VALUE)
                .addContainerGap())
        );
        containerLayout.setVerticalGroup(
            containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(containerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_phoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_alias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(btn_save)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_delete)
                    .addComponent(btn_update))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_refresh)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        menu_contacts.setText("Contacts");

        menuItem_search.setText("Search Contact");
        menuItem_search.addActionListener(evt -> menuItem_searchActionPerformed(evt));
        menu_contacts.add(menuItem_search);

        menuBar_dashboard.add(menu_contacts);

        setJMenuBar(menuBar_dashboard);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(container, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(container, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private String checkAllInput() {
        if (txt_phoneNumber.getText().equals("")) {
            return "Phone number cannot be empty.";
        } else if (txt_name.getText().equals("")) {
            return "Name cannot be empty.";
        }

        return "good";
    }

    private void refreshContactTable() {
        try {
            Connection con = connection.getConnection();

            // Get all data from contacts table.
            PreparedStatement ps = con.prepareStatement("SELECT * FROM contacts");
            ResultSet rs = ps.executeQuery();

            // TableModel for manipulating data.
            DefaultTableModel model = (DefaultTableModel) contactTable.getModel();

            model.setRowCount(0);

            while (rs.next()) {
                model.addRow(new String[]{rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5)});
            }
        } catch (SQLException | ClassNotFoundException ex) {
            logger.error(ex.getMessage());
            System.exit(ex.hashCode());
        }
    }

    private boolean checkifPhoneExist(String phone) throws SQLException, ClassNotFoundException {
        Connection con = connection.getConnection();

        PreparedStatement ps = con.prepareStatement("SELECT COUNT(*) AS count FROM contacts WHERE contact_phone = ?");
        ps.setString(1, phone);

        ResultSet rs = ps.executeQuery();
        rs.next();

        if (rs.getInt("count") >= 1) {
            return true;
        }

        rs.close();
        ps.close();
        con.close();
        return false;
    }

    private void saveContact() {
        if (!checkAllInput().equals("good")) {
            JOptionPane.showMessageDialog(rootPane, "Error: Please fill all input required.", "Requirements not met", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            Connection con = connection.getConnection();

            PreparedStatement ps = con.prepareStatement("INSERT INTO contacts (contact_phone, contact_name, contact_email, contact_alias) VALUES (?, ?, ?, ?)");

            ps.setString(1, txt_phoneNumber.getText());
            ps.setString(2, txt_name.getText());
            ps.setString(3, txt_email.getText());
            ps.setString(4, txt_alias.getText());

            if (!checkifPhoneExist(txt_phoneNumber.getText())) {
                txt_phoneNumber.setText("");
                txt_name.setText("");
                txt_email.setText("");
                txt_alias.setText("");
                ps.execute();
                JOptionPane.showMessageDialog(null, "Contact info successfully saved!", "INFO: Success!", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, String.format("Contact info %s already exists.", txt_phoneNumber.getText()), "ERROR: Contact already exists.", JOptionPane.ERROR_MESSAGE);
            }

            ps.close();
            con.close();
            refreshContactTable();
        } catch (SQLException | ClassNotFoundException ex) {
            logger.error(ex.getMessage());
            System.exit(ex.hashCode());
        }
    }

    private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed
        saveContact();
    }//GEN-LAST:event_btn_saveActionPerformed

    private void btn_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshActionPerformed
        refreshContactTable();
    }//GEN-LAST:event_btn_refreshActionPerformed

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        DefaultTableModel model = (DefaultTableModel) contactTable.getModel();

        int response = JOptionPane.showConfirmDialog(null, "Deleting the contacts you selected, are you sure?", "", JOptionPane.YES_NO_OPTION);

        if (response == JOptionPane.YES_OPTION) {
            try {
                Connection con = connection.getConnection();

                PreparedStatement ps = con.prepareStatement("DELETE FROM contacts WHERE contact_phone = ?");

                int[] selection = contactTable.getSelectedRows();
                if (selection.length == 1) {
                    ps.setString(1, model.getValueAt(selection[0], 0).toString());
                    ps.execute();
                    JOptionPane.showMessageDialog(null, String.format("Contact %s successfully deleted!", model.getValueAt(selection[0], 0)), "INFO: Success!", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, String.format("Deleting %s contacts.", selection.length), "INFO: Deleting", JOptionPane.INFORMATION_MESSAGE);
                    for (int row_index : selection) {
                        ps.setString(1, model.getValueAt(row_index, 0).toString());
                        ps.execute();
                    }
                }

                con.close();
                ps.close();

                refreshContactTable();
            } catch (SQLException | ClassNotFoundException ex) {
                logger.error(ex.getMessage());
                System.exit(ex.hashCode());
            }
        }
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
       DefaultTableModel model = (DefaultTableModel) contactTable.getModel();
       String contact_phone = model.getValueAt(contactTable.getSelectedRow(), 0).toString();
       String contact_name = model.getValueAt(contactTable.getSelectedRow(), 1).toString();
       String contact_email = model.getValueAt(contactTable.getSelectedRow(), 2).toString();
       String contact_alias = model.getValueAt(contactTable.getSelectedRow(), 3).toString();
       
       UpdateForm updateForm = new UpdateForm(contact_phone);
       updateForm.phone_number = contact_phone;
       updateForm.name = contact_name;
       updateForm.email = contact_email;
       updateForm.alias = contact_alias;
       updateForm.setVisible(true);

    }//GEN-LAST:event_btn_updateActionPerformed

    private void menuItem_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItem_searchActionPerformed
        new SearchForm().setVisible(true);
    }//GEN-LAST:event_menuItem_searchActionPerformed

    private void txt_phoneNumberKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_phoneNumberKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            saveContact();
        }
    }//GEN-LAST:event_txt_phoneNumberKeyPressed

    private void txt_nameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_nameKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            saveContact();
        }
    }//GEN-LAST:event_txt_nameKeyPressed

    private void txt_emailKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_emailKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            saveContact();
        }
    }//GEN-LAST:event_txt_emailKeyPressed

    private void txt_aliasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_aliasKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            saveContact();
        }
    }//GEN-LAST:event_txt_aliasKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new Dashboard().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_refresh;
    private javax.swing.JButton btn_save;
    private javax.swing.JButton btn_update;
    private javax.swing.JTable contactTable;
    private javax.swing.JPanel container;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar menuBar_dashboard;
    private javax.swing.JMenuItem menuItem_search;
    private javax.swing.JMenu menu_contacts;
    private javax.swing.JTextField txt_alias;
    private javax.swing.JTextField txt_email;
    private javax.swing.JTextField txt_name;
    private javax.swing.JTextField txt_phoneNumber;
    // End of variables declaration//GEN-END:variables
}
